# ========================================
# SPRING BOOT APPLICATION CONFIGURATION
# ========================================
spring.application.name=smart-code-review
spring.profiles.active=dev

# ========================================
# SERVER CONFIGURATION
# ========================================
server.port=8083
server.servlet.context-path=/

# ========================================
# MULTIPART FILE UPLOAD CONFIGURATION
# ========================================
spring.servlet.multipart.enabled=true
spring.servlet.multipart.max-file-size=50MB
spring.servlet.multipart.max-request-size=50MB
spring.servlet.multipart.file-size-threshold=2KB
spring.servlet.multipart.location=${java.io.tmpdir}

# ========================================
# SECURITY CONFIGURATION
# ========================================
spring.security.oauth2.client.registration.google.client-id=${GOOGLE_CLIENT_ID:}
spring.security.oauth2.client.registration.google.client-secret=${GOOGLE_CLIENT_SECRET:}
spring.security.oauth2.client.registration.google.scope=openid,profile,email
spring.security.oauth2.client.registration.google.redirect-uri={baseUrl}/login/oauth2/code/{registrationId}

# ========================================
# AWS CONFIGURATION
# ========================================
aws.region=${AWS_REGION:us-east-1}
aws.s3.bucket=${AWS_S3_BUCKET:somdip-smartcode-storage}
aws.bedrock.model-id=${BEDROCK_MODEL_ID:us.amazon.nova-premier-v1:0}
aws.bedrock.region=${AWS_BEDROCK_REGION:us-east-1}

# AWS Credentials (use IAM roles in production)
aws.accessKeyId=${AWS_ACCESS_KEY_ID:}
aws.secretKey=${AWS_SECRET_ACCESS_KEY:}

# ========================================
# SESSION MANAGEMENT CONFIGURATION
# ========================================
session.duration-minutes=${SESSION_DURATION_MINUTES:7}
session.cleanup-interval-minutes=${SESSION_CLEANUP_INTERVAL:5}
session.max-concurrent-sessions=${MAX_CONCURRENT_SESSIONS:10}
session.otp-expiry-minutes=${OTP_EXPIRY_MINUTES:5}

# ========================================
# EMAIL CONFIGURATION - SENDGRID
# ========================================
sendgrid.api.key=${SENDGRID_API_KEY:}
sendgrid.from.email=${SENDGRID_FROM_EMAIL:smartcode@somdip.dev}
sendgrid.from.name=${SENDGRID_FROM_NAME:Smart Code Review}
sendgrid.enabled=${SENDGRID_ENABLED:true}

# Template Configuration
email.template.otp.subject=Your Smart Code Review Verification Code
email.template.analysis.subject=Code Analysis Complete

# ========================================
# JWT CONFIGURATION
# ========================================
jwt.secret=${JWT_SECRET:your-256-bit-secret-key-here-make-it-long-and-secure-for-production}
jwt.expiration=${JWT_EXPIRATION:420000}
jwt.issuer=smart-code-review
jwt.header=Authorization
jwt.prefix=Bearer 

# ========================================
# CORS CONFIGURATION
# ========================================
cors.allowed-origins=${CORS_ALLOWED_ORIGINS:https://smartcode.somdip.dev,http://localhost:3000,http://localhost:8083}
cors.allowed-methods=GET,POST,PUT,DELETE,OPTIONS
cors.allowed-headers=*
cors.allow-credentials=true
cors.max-age=3600

# ========================================
# ACTUATOR CONFIGURATION
# ========================================
management.endpoints.web.exposure.include=health,info,metrics,env
management.endpoints.web.base-path=/actuator
management.endpoint.health.show-details=always
management.endpoint.health.show-components=always
management.info.env.enabled=true
management.info.java.enabled=true
management.info.os.enabled=true

# Health Check Configuration
management.health.livenessstate.enabled=true
management.health.readinessstate.enabled=true

# ========================================
# LOGGING CONFIGURATION
# ========================================
logging.level.root=WARN
logging.level.com.somdiproy.smartcode=INFO
logging.level.org.springframework.security=WARN
logging.level.org.springframework.web=INFO
logging.level.software.amazon.awssdk=WARN
logging.level.com.sendgrid=INFO

# Logging Pattern
logging.pattern.console=%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n
logging.pattern.file=%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n

# File Logging (for production)
logging.file.name=${LOG_FILE_PATH:/app/logs/smartcode.log}
logging.file.max-size=10MB
logging.file.max-history=7
logging.file.total-size-cap=100MB

# ========================================
# APPLICATION SPECIFIC CONFIGURATION
# ========================================
app.name=Smart Code Review
app.version=1.0.0
app.description=AI-Powered Code Analysis Platform
app.base-url=${APPLICATION_BASE_URL:https://smartcode.somdip.dev}
app.frontend-url=${FRONTEND_URL:https://smartcode.somdip.dev}

# Code Analysis Configuration
code.analysis.max-file-size=5MB
code.analysis.max-files=100
code.analysis.max-content-length=500KB
code.analysis.timeout-seconds=30
code.analysis.supported-extensions=.java,.js,.ts,.jsx,.tsx,.py,.cpp,.c,.h,.hpp,.cs,.php,.rb,.go,.rs,.kt,.swift,.scala,.clj,.sql,.html,.css,.scss,.sass,.xml,.json,.yaml,.yml,.md,.txt,.sh,.bat,.ps1,.dockerfile,.properties

# GitHub Webhook Configuration
github.webhook.secret=${GITHUB_WEBHOOK_SECRET:}
github.webhook.enabled=${GITHUB_WEBHOOK_ENABLED:true}

# ========================================
# CACHE CONFIGURATION
# ========================================
spring.cache.type=simple
spring.cache.cache-names=sessions,analysis-results,otp-codes
spring.cache.caffeine.spec=maximumSize=1000,expireAfterAccess=600s

# ========================================
# THREAD POOL CONFIGURATION
# ========================================
spring.task.execution.pool.core-size=5
spring.task.execution.pool.max-size=20
spring.task.execution.pool.queue-capacity=100
spring.task.execution.thread-name-prefix=smartcode-

# ========================================
# JACKSON JSON CONFIGURATION
# ========================================
spring.jackson.default-property-inclusion=NON_NULL
spring.jackson.serialization.write-dates-as-timestamps=false
spring.jackson.serialization.indent-output=true
spring.jackson.deserialization.fail-on-unknown-properties=false

# ========================================
# VALIDATION CONFIGURATION
# ========================================
spring.validation.enabled=true

# ========================================
# INTEGRATION WITH EXISTING SERVICES
# ========================================
# Portfolio Service Integration
portfolio.service.url=${PORTFOLIO_SERVICE_URL:https://somdip.dev}
portfolio.service.enabled=${PORTFOLIO_INTEGRATION_ENABLED:true}

# HR Demo Service Integration
hr.demo.service.url=${HR_DEMO_SERVICE_URL:https://demos.somdip.dev}
hr.demo.service.enabled=${HR_DEMO_INTEGRATION_ENABLED:true}

# Shared Email Configuration (inherits from portfolio service)
shared.email.enabled=${SHARED_EMAIL_ENABLED:true}
shared.analytics.enabled=${SHARED_ANALYTICS_ENABLED:true}